{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Desktop/projects/sd-013-b-project-trybewallet/src/pages/Wallet.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport WalletHeader from './WalletHeader';\nimport { fetchCoins, setExpenses, setTotal } from '../actions';\nimport WalletForm from './WalletForm';\nimport store from '../store';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expense: {\n        value: 0,\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação'\n      },\n      total: 0,\n      moeda: 'BRL',\n      arrayLen: 0\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n    this.setTotal = this.setTotal.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      sendCoin\n    } = this.props;\n    sendCoin();\n  }\n\n  componentDidUpdate() {// this.setTotal(store.getState().wallet.expenses);\n    // console.log(store.getState().wallet);\n  }\n\n  setTotal(arr) {\n    const {\n      arrayLen,\n      expense,\n      total\n    } = this.state;\n    const {\n      sendTotal,\n      wallet\n    } = this.props;\n\n    if (arrayLen < arr.length) {\n      const current = arr[arr.length - 1];\n      const conversionValue = current.exchangeRates[expense.currency];\n      const conversion = (expense.value * conversionValue.ask).toFixed(2);\n      const soma = total + parseFloat(conversion);\n      const counter = arrayLen + 1; // console.log(conversion);\n\n      this.setState({\n        total: soma,\n        arrayLen: counter\n      }, () => {\n        sendTotal(this.state.total);\n      });\n    } // console.log(soma);\n    // console.log(total);\n    // if (total === soma) {\n    //   console.log('test');\n    //   // sendTotal(total);\n    // }\n    // const item = expenses[expenses.length - 1];\n    // if (item) {\n    //   const test = item.exchangeRates[item.currency];\n    //   console.log(test);\n    //   console.log(item);\n    //   const conversion = (item.value * test.ask).toFixed(2);\n    //   return conversion;\n    // }\n\n  }\n\n  handleChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    const {\n      wallet: {\n        expenses\n      }\n    } = this.props;\n    this.setState(prevState => ({\n      expense: { ...prevState.expense,\n        [name]: value,\n        id: expenses.length\n      }\n    }));\n  }\n\n  handleButton() {\n    const {\n      sendExpenses,\n      sendTotal\n    } = this.props;\n    const {\n      total\n    } = this.state;\n    const {\n      expense\n    } = this.state;\n    sendExpenses(expense);\n  }\n\n  render() {\n    const {\n      user,\n      wallet,\n      total\n    } = this.props;\n    const {\n      moeda\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WalletHeader, {\n      total: total,\n      moeda: moeda,\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WalletForm, {\n      wallet: wallet,\n      onChange: this.handleChange,\n      onClick: this.handleButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  wallet: state.wallet,\n  total: state.wallet.total\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendCoin: () => dispatch(fetchCoins()),\n  sendExpenses: expense => dispatch(setExpenses(expense)),\n  sendTotal: total => dispatch(setTotal(total))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\nWallet.propTypes = {\n  sendCoin: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    email: PropTypes.string\n  }).isRequired,\n  wallet: PropTypes.shape({\n    currencies: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired\n};","map":{"version":3,"sources":["/home/matheus/Desktop/projects/sd-013-b-project-trybewallet/src/pages/Wallet.js"],"names":["React","PropTypes","connect","WalletHeader","fetchCoins","setExpenses","setTotal","WalletForm","store","Wallet","Component","constructor","props","state","expense","value","currency","method","tag","total","moeda","arrayLen","handleChange","bind","handleButton","componentDidMount","sendCoin","componentDidUpdate","arr","sendTotal","wallet","length","current","conversionValue","exchangeRates","conversion","ask","toFixed","soma","parseFloat","counter","setState","target","name","expenses","prevState","id","sendExpenses","render","user","mapStateToProps","mapDispatchToProps","dispatch","propTypes","func","isRequired","shape","email","string","currencies","arrayOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport WalletHeader from './WalletHeader';\nimport { fetchCoins, setExpenses, setTotal } from '../actions';\nimport WalletForm from './WalletForm';\nimport store from '../store';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expense: {\n        value: 0,\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n      },\n      total: 0,\n      moeda: 'BRL',\n      arrayLen: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n    this.setTotal = this.setTotal.bind(this);\n  }\n\n  componentDidMount() {\n    const { sendCoin } = this.props;\n    sendCoin();\n  }\n\n  componentDidUpdate() {\n    // this.setTotal(store.getState().wallet.expenses);\n    // console.log(store.getState().wallet);\n  }\n\n  setTotal(arr) {\n    const { arrayLen, expense, total } = this.state;\n    const { sendTotal, wallet } = this.props;\n    if (arrayLen < arr.length) {\n      const current = arr[arr.length - 1];\n      const conversionValue = current.exchangeRates[expense.currency];\n      const conversion = (expense.value * conversionValue.ask).toFixed(2);\n      const soma = (total + parseFloat(conversion));\n      const counter = arrayLen + 1;\n      // console.log(conversion);\n      this.setState(\n        {\n          total: soma,\n          arrayLen: counter,\n        }, () => {\n          sendTotal(this.state.total);\n        },\n      );\n    }\n    // console.log(soma);\n    // console.log(total);\n    // if (total === soma) {\n    //   console.log('test');\n    //   // sendTotal(total);\n    // }\n    // const item = expenses[expenses.length - 1];\n    // if (item) {\n    //   const test = item.exchangeRates[item.currency];\n    //   console.log(test);\n    //   console.log(item);\n    //   const conversion = (item.value * test.ask).toFixed(2);\n    //   return conversion;\n    // }\n  }\n\n  handleChange({ target: { name, value } }) {\n    const { wallet: { expenses } } = this.props;\n    this.setState((prevState) => ({\n      expense: {\n        ...prevState.expense,\n        [name]: value,\n        id: expenses.length,\n      },\n    }));\n  }\n\n  handleButton() {\n    const { sendExpenses, sendTotal } = this.props;\n    const { total } = this.state;\n    const { expense } = this.state;\n    sendExpenses(expense);\n  }\n\n  render() {\n    const { user, wallet, total } = this.props;\n    const { moeda } = this.state;\n    return (\n      <div>\n        <WalletHeader total={ total } moeda={ moeda } user={ user } />\n        <br />\n        <WalletForm wallet={ wallet } onChange={ this.handleChange } onClick={ this.handleButton } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  wallet: state.wallet,\n  total: state.wallet.total,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendCoin: () => dispatch(fetchCoins()),\n  sendExpenses: (expense) => dispatch(setExpenses(expense)),\n  sendTotal: (total) => dispatch(setTotal(total)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  sendCoin: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    email: PropTypes.string,\n  }).isRequired,\n  wallet: PropTypes.shape({\n    currencies: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}