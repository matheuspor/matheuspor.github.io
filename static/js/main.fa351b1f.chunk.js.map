{"version":3,"sources":["services/currenciesAPI.js","actions/index.js","pages/Login.js","pages/WalletHeader.js","pages/WalletForm.js","pages/WalletTable.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["currenciesAPI","fetch","then","response","json","setWallet","payload","type","Login","props","state","buttonDisabled","email","password","handleChange","bind","checkButton","handleSubmit","this","endsWith","length","setState","target","name","value","event","preventDefault","history","setUser","push","data-testid","onChange","placeholder","disabled","onClick","React","Component","connect","dispatch","WalletHeader","user","total","moeda","wallet","expenses","reduce","acc","currency","exchangeRates","parseFloat","ask","toFixed","defaultProps","WalletForm","editItem","editClick","callback","htmlFor","id","style","verticalAlign","expense","currencies","map","coin","index","key","makeDescription","makeButton","WalletTable","item","deleteItem","description","tag","method","makeTable","Wallet","isEditing","handleButton","sendCoin","prevState","sendExpenses","deleteExpense","setEditedItem","a","array","Object","keys","filter","res","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa351b1f.chunk.js","sourcesContent":["const APIURL = 'https://economia.awesomeapi.com.br/json/all';\n\nconst currenciesAPI = () => (\n  fetch(APIURL)\n    .then((response) => (\n      response.json()\n    ))\n);\n\nexport default currenciesAPI;\n","import currenciesAPI from '../services/currenciesAPI';\n\nexport const USER_INFO = 'USER_INFO';\nexport const COIN_INFO = 'COIN_INFO';\nexport const EXPENSES = 'EXPENSES';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const EDIT_ITEM = 'EDIT_ITEM';\n\nexport const setUserInfo = (payload) => ({\n  type: USER_INFO, payload,\n});\nexport const deleteItem = (payload) => ({ type: DELETE_ITEM, payload });\nexport const editItem = (payload) => ({ type: EDIT_ITEM, payload });\nexport const setCoins = (payload) => ({ type: COIN_INFO, payload });\nexport const setWallet = (payload) => ({ type: EXPENSES, payload });\nexport const setExpenses = (payload) => async (dispatch) => {\n  payload.exchangeRates = await currenciesAPI();\n  dispatch(setWallet(payload));\n};\n\nexport const fetchCoins = () => async (dispatch) => {\n  const response = await currenciesAPI();\n  const array = Object.keys(response).filter((res) => res !== 'USDT');\n  dispatch(setCoins(array));\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setUserInfo } from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonDisabled: true,\n      email: '',\n      password: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.checkButton = this.checkButton.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.checkButton();\n  }\n\n  checkButton() {\n    const { email, password, buttonDisabled } = this.state;\n    const MIN_PASS_LENGTH = 6;\n    const isEmailValid = email.endsWith('.com') || email.endsWith('.br');\n    if (isEmailValid && password.length >= MIN_PASS_LENGTH && buttonDisabled) {\n      this.setState({ buttonDisabled: false });\n    }\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n      buttonDisabled: true,\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { history, setUser } = this.props;\n    const { email } = this.state;\n    setUser(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { buttonDisabled } = this.state;\n    return (\n      <div>\n        <div>\n          <input\n            data-testid=\"email-input\"\n            type=\"email\"\n            name=\"email\"\n            onChange={ this.handleChange }\n            placeholder=\"email\"\n          />\n          <input\n            data-testid=\"password-input\"\n            type=\"password\"\n            name=\"password\"\n            onChange={ this.handleChange }\n            placeholder=\"senha\"\n          />\n        </div>\n        <button\n          type=\"button\"\n          disabled={ buttonDisabled }\n          onClick={ this.handleSubmit }\n        >\n          Entrar\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setUser: (email) => dispatch(setUserInfo(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  setUser: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass WalletHeader extends React.Component {\n  render() {\n    const { user: { email }, total, moeda } = this.props;\n    return (\n      <div>\n        <span data-testid=\"email-field\">\n          Email:\n          {' '}\n          {email}\n        </span>\n        {' '}\n        |\n        {' '}\n        <span data-testid=\"total-field\">\n          Despesa Total: R$\n          {total}\n        </span>\n        {' '}\n        <span data-testid=\"header-currency-field\">\n          {moeda}\n        </span>\n      </div>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  // Consultei o repositório do Rafael Nery para o cálculo do total.\n  // https://github.com/tryber/sd-013-b-project-trybewallet/blob/rafael-nery-machado-trybewallet-project/src/components/Header/index.jsx\n  total: state.wallet.expenses.reduce((acc, { value, currency, exchangeRates }) => (\n    acc + parseFloat(value * exchangeRates[currency].ask)\n  ), 0).toFixed(2),\n});\n\nexport default connect(mapStateToProps)(WalletHeader);\n\nWalletHeader.propTypes = {\n  user: PropTypes.shape({\n    email: PropTypes.string,\n  }).isRequired,\n  total: PropTypes.string,\n  moeda: PropTypes.string.isRequired,\n};\n\nWalletHeader.defaultProps = {\n  total: 0,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class WalletForm extends React.Component {\n  makeButton(editItem) {\n    const { editClick, onClick } = this.props;\n    return (\n      editItem\n        ? <button type=\"button\" onClick={ editClick }> Editar despesa </button>\n        : <button type=\"button\" onClick={ onClick }> Adicionar Despesa </button>\n    );\n  }\n\n  makeDescription(callback) {\n    return (\n      <label htmlFor=\"desc\">\n        Descrição:\n        <textarea\n          name=\"description\"\n          id=\"desc\"\n          style={ { verticalAlign: 'top' } }\n          onChange={ callback }\n        />\n      </label>\n    );\n  }\n\n  render() {\n    const { expense: { value }, wallet: { currencies }, onChange, editItem } = this.props;\n    return (\n      <form>\n        <label htmlFor=\"valor\">\n          Valor:\n          <input\n            value={ value }\n            onChange={ onChange }\n            name=\"value\"\n            type=\"number\"\n            id=\"valor\"\n          />\n        </label>\n        {' '}\n        <label htmlFor=\"moeda\">\n          Moeda:\n          <select name=\"currency\" id=\"moeda\" onChange={ onChange }>\n            {currencies\n              && currencies.map((coin, index) => <option key={ index }>{coin}</option>)}\n          </select>\n        </label>\n        {' '}\n        <label htmlFor=\"pagamento\">\n          Método de pagamento:\n          <select name=\"method\" id=\"pagamento\" onChange={ onChange }>\n            <option> Dinheiro </option>\n            <option> Cartão de crédito </option>\n            <option> Cartão de débito </option>\n          </select>\n        </label>\n        {' '}\n        <label htmlFor=\"tag\">\n          Tag:\n          <select name=\"tag\" id=\"tag\" onChange={ onChange }>\n            <option value=\"Alimentação\"> Alimentação </option>\n            <option value=\"Lazer\"> Lazer </option>\n            <option value=\"Trabalho\"> Trabalho </option>\n            <option value=\"Transporte\"> Transporte </option>\n            <option value=\"Saúde\"> Saúde </option>\n          </select>\n        </label>\n        {' '}\n        {this.makeDescription(onChange)}\n        {this.makeButton(editItem)}\n      </form>);\n  }\n}\n\nWalletForm.propTypes = {\n  editClick: PropTypes.func.isRequired,\n  editItem: PropTypes.bool.isRequired,\n  expense: PropTypes.shape({\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  }).isRequired,\n  onChange: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n  wallet: PropTypes.shape({\n    currencies: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass WalletTable extends React.Component {\n  makeButton(item) {\n    const { deleteItem, editItem } = this.props;\n    return (\n      <>\n        <button\n          type=\"button\"\n          data-testid=\"delete-btn\"\n          onClick={ () => deleteItem(item) }\n        >\n          Deletar\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"edit-btn\"\n          onClick={ () => editItem(item) }\n        >\n          Editar\n        </button>\n      </>\n    );\n  }\n\n  makeTable(expenses) {\n    if (expenses.length) {\n      return expenses.map((item) => (\n        <tr key={ item.id }>\n          <td>\n            {item.description}\n          </td>\n          <td>\n            {item.tag}\n          </td>\n          <td>\n            {item.method}\n          </td>\n          <td>\n            {item.value}\n          </td>\n          <td>\n            {item.exchangeRates[item.currency].name}\n          </td>\n          <td>\n            {parseFloat((item.exchangeRates[item.currency].ask)).toFixed(2)}\n          </td>\n          <td>\n            {parseFloat(\n              (item.exchangeRates[item.currency].ask * item.value\n              ),\n            ).toFixed(2)}\n          </td>\n          <td>\n            Real\n          </td>\n          <td>\n            {this.makeButton(item)}\n          </td>\n        </tr>\n      ));\n    }\n  }\n\n  render() {\n    const { wallet: { expenses } } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th> Descrição </th>\n            <th> Tag </th>\n            <th> Método de pagamento </th>\n            <th> Valor </th>\n            <th> Moeda </th>\n            <th> Câmbio utilizado </th>\n            <th> Valor convertido </th>\n            <th> Moeda de conversão </th>\n            <th> Editar/Excluir </th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.makeTable(expenses)}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  wallet: state.wallet,\n});\n\nexport default connect(mapStateToProps)(WalletTable);\n\nWalletTable.propTypes = {\n  deleteItem: PropTypes.func.isRequired,\n  editItem: PropTypes.func.isRequired,\n  wallet: PropTypes.shape({\n    expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport WalletHeader from './WalletHeader';\nimport { deleteItem, editItem, fetchCoins, setExpenses } from '../actions';\nimport WalletForm from './WalletForm';\nimport WalletTable from './WalletTable';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expense: {\n        id: 0,\n        value: 0,\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n      },\n      moeda: 'BRL',\n      isEditing: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.editItem = this.editItem.bind(this);\n    this.editClick = this.editClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { sendCoin } = this.props;\n    sendCoin();\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState((prevState) => ({\n      expense: {\n        ...prevState.expense,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleButton() {\n    const { sendExpenses, wallet } = this.props;\n    const { expense } = this.state;\n    sendExpenses(expense);\n    this.setState((prevState) => ({\n      expense: {\n        ...prevState.expense,\n        id: wallet.expenses.length + 1,\n      } }),\n    () => {\n    });\n  }\n\n  deleteItem(item) {\n    const { deleteExpense, wallet } = this.props;\n    this.setState((prevState) => ({\n      expense: {\n        ...prevState.expense,\n        id: wallet.expenses.length - 1,\n      } }),\n    () => {\n      deleteExpense(item);\n    });\n  }\n\n  editItem(item) {\n    this.setState({\n      expense: item,\n      isEditing: true });\n  }\n\n  editClick() {\n    const { expense } = this.state;\n    const { setEditedItem, wallet } = this.props;\n    setEditedItem(expense);\n    this.setState((prevState) => ({\n      ...prevState,\n      isEditing: false,\n      expense: {\n        ...prevState.expense,\n        id: wallet.expenses.length,\n      },\n    }));\n  }\n\n  render() {\n    const { wallet } = this.props;\n    const { moeda, isEditing, expense } = this.state;\n    return (\n      <div>\n        <header>\n          <WalletHeader moeda={ moeda } />\n          <br />\n        </header>\n        <WalletForm\n          wallet={ wallet }\n          onChange={ this.handleChange }\n          onClick={ this.handleButton }\n          editItem={ isEditing }\n          expense={ expense }\n          editClick={ this.editClick }\n        />\n        <WalletTable deleteItem={ this.deleteItem } editItem={ this.editItem } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendCoin: () => dispatch(fetchCoins()),\n  sendExpenses: (expense) => dispatch(setExpenses(expense)),\n  deleteExpense: (item) => dispatch(deleteItem(item)),\n  setEditedItem: (item) => dispatch(editItem(item)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  deleteExpense: PropTypes.func.isRequired,\n  sendCoin: PropTypes.func.isRequired,\n  sendExpenses: PropTypes.func.isRequired,\n  setEditedItem: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    email: PropTypes.string,\n  }).isRequired,\n  wallet: PropTypes.shape({\n    currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n    expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n    total: PropTypes.number,\n  }),\n};\n\nWallet.defaultProps = {\n  wallet: {\n    total: 0,\n  },\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { USER_INFO } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_INFO:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { COIN_INFO, EXPENSES, DELETE_ITEM, EDIT_ITEM } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case COIN_INFO:\n    return { ...state, currencies: payload };\n  case EXPENSES:\n    return { ...state, expenses: [...state.expenses, payload] };\n  case EDIT_ITEM: {\n    return {\n      ...state,\n      expenses: state.expenses.map(\n        (item) => (item.id === payload.id ? payload : item),\n      ) };\n  }\n  case DELETE_ITEM: {\n    return {\n      ...state,\n      expenses: state.expenses.filter(({ id }) => id !== payload.id),\n    };\n  }\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}